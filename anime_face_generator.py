# -*- coding: utf-8 -*-
"""Anime Face Generator.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LY8GZG9cReFU3WDCp44b5nH0kW2H1oxn
"""

!pip install opendatasets --upgrade --quiet

import opendatasets as od

dataset_url = 'https://www.kaggle.com/splcher/animefacedataset'
od.download(dataset_url)

import glob, os

len(glob.glob('/content/animefacedataset/images/*.*'))

DATA_DIR = '/content/animefacedataset'
print(os.listdir(DATA_DIR))

import torch, torchvision
from torch.utils.data import DataLoader
from torchvision.datasets import ImageFolder
from torchvision import transforms

IMG_SIZE = 64
BATCH_SIZE = 128
LR = 0.001
EPOCHS = 50
STATS = (.5, .5, .5), (.5, .5, .5)

transforms = transforms.Compose([
    transforms.Resize(IMG_SIZE),
    transforms.CenterCrop(IMG_SIZE),
    transforms.ToTensor(),
    transforms.Normalize(*STATS)
])

train_ds = ImageFolder(DATA_DIR, transform=transforms)
train_dl = DataLoader(train_ds, BATCH_SIZE, shuffle=True, num_workers=2, pin_memory=True)

# Commented out IPython magic to ensure Python compatibility.
from torchvision.utils import make_grid
import matplotlib.pyplot as plt
# %matplotlib inline

def denorm(img_tensors):
    return img_tensors * STATS[1][0] + STATS[0][0]

def show_images(images, nmax=64):
    fig, ax = plt.subplots(figsize = (8, 8))
    ax.set_xticks([])
    ax.set_yticks([])
    # images.detach()[:nmax] --> taking nmax(64 --> 8x8) images from batch_size(128) images
    ax.imshow(make_grid(denorm(images.detach()[:nmax]), nrow=8).permute(1, 2, 0))
    plt.show()

def show_batch(dl, nmax=64):
    for images, _ in dl:
        # print(_)
        show_images(images, nmax)
        break

show_batch(dl=train_dl)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
device

import torch.nn as nn

discriminator = nn.Sequential(
    # input : bs x 3 x 64 x 64

    nn.Conv2d(in_channels=3, out_channels=64, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(num_features=64),
    nn.LeakyReLU(negative_slope=.2, inplace=True),
    # bs x 64 x 32 x 32

    nn.Conv2d(in_channels=64, out_channels=128, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(num_features=128),
    nn.LeakyReLU(negative_slope=.2, inplace=True),
    # bs x 128 x 16 x 16

    nn.Conv2d(in_channels=128, out_channels=256, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(num_features=256),
    nn.LeakyReLU(negative_slope=.2, inplace=True),
    # bs x 256 x 8 x 8

    nn.Conv2d(in_channels=256, out_channels=512, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(num_features=512),
    nn.LeakyReLU(negative_slope=.2, inplace=True),
    # bs x 512 x 4 x 4

    nn.Conv2d(in_channels=512, out_channels=1, kernel_size=4, stride=2, padding=0, bias=False),
    # bs x 1 x 1 x 1

    nn.Flatten(),
    nn.Sigmoid()
).to(device)

next(discriminator.parameters()).is_cuda

LATENT_SIZE = 128

generator = nn.Sequential(
    # bs x LATENT_SIZE x 1 x 1

    nn.ConvTranspose2d(in_channels=LATENT_SIZE, out_channels=512, kernel_size=4, stride=1, padding=0, bias=False),
    nn.BatchNorm2d(num_features=512),
    nn.ReLU(inplace=True),
    # bs x 512 x 4 x 4

    nn.ConvTranspose2d(in_channels=512, out_channels=256, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(num_features=256),
    nn.ReLU(inplace=True),
    # bs x 256 x 8 x 8

    nn.ConvTranspose2d(in_channels=256, out_channels=128, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(num_features=128),
    nn.ReLU(inplace=True),
    # bs x 128 x 16 x 16

    nn.ConvTranspose2d(in_channels=128, out_channels=64, kernel_size=4, stride=2, padding=1, bias=False),
    nn.BatchNorm2d(num_features=64),
    nn.ReLU(inplace=True),
    # bs x 64 x 32 x 32

    nn.ConvTranspose2d(in_channels=64, out_channels=3, kernel_size=4, stride=2, padding=1, bias=False),
    nn.Tanh(),
    # bs x 3 x 64 x 64
).to(device)

next(generator.parameters()).is_cuda

from torchvision.utils import save_image

sample_dir = 'generated_images'
os.makedirs(sample_dir, exist_ok=True)

def save_sample(index, latent_tensors, nmax=64,show=True):
    fake_images = generator(latent_tensors)
    fake_name = f'generated_image_{index}.png'
    save_image(denorm(fake_images), os.path.join(sample_dir, fake_name), nrow=8)
    print(fake_name, ' saved')
    if show:
        show_images(fake_images.cpu())

fixed_latent = torch.randn(BATCH_SIZE, LATENT_SIZE, 1, 1, device=device)
save_sample(0, fixed_latent)

from torch.nn.functional import binary_cross_entropy
import torch.optim as optim
import numpy as np, time

def train_discriminator(real_images, opt_d):
    opt_d.zero_grad()

    real_preds = discriminator(real_images.to(device))
    real_targets = torch.ones(real_images.size(0), 1, device=device)
    real_loss = binary_cross_entropy(real_preds, real_targets)
    real_score = torch.mean(real_preds).item()

    latent = torch.randn(BATCH_SIZE, LATENT_SIZE, 1, 1, device=device)
    fake_images = generator(latent)

    fake_preds = discriminator(fake_images.to(device))
    fake_targets = torch.zeros(fake_images.size(0), 1, device=device)
    fake_loss = binary_cross_entropy(fake_preds, fake_targets)
    fake_score = torch.mean(fake_preds).item()

    loss = real_loss + fake_loss
    loss.backward()
    opt_d.step()

    return loss.item(), real_score, fake_score

def train_generator(opt_g):
    opt_g.zero_grad()

    latent = torch.randn(BATCH_SIZE, LATENT_SIZE, 1, 1, device=device)
    fake_images = generator(latent)

    fake_preds = discriminator(fake_images.to(device))
    fake_targets = torch.ones(fake_images.size(0), 1, device=device)
    fake_loss = binary_cross_entropy(fake_preds, fake_targets)

    fake_loss.backward()
    opt_g.step()

    return fake_loss.item()

opt_d = torch.optim.Adam(discriminator.parameters(), lr=LR, betas=(0.5, 0.999))
opt_g = torch.optim.Adam(generator.parameters(), lr=LR, betas=(0.5, 0.999))

import time
import numpy as np

for epoch in range(EPOCHS):
    start = time.time()
    torch.cuda.empty_cache()

    losses_d = []
    losses_g = []
    real_scores = []
    fake_scores = []

    for real_images, _ in train_dl:
        loss_d, real_score, fake_score = train_discriminator(real_images, opt_d)
        loss_g = train_generator(opt_g)

        losses_d.append(loss_d)
        losses_g.append(loss_g)
        real_scores.append(real_score)
        fake_scores.append(fake_score)
    
    mean_loss_d = np.sum(losses_d) / len(losses_d)
    mean_loss_g = np.sum(losses_g) / len(losses_g)
    mean_real_scores = np.sum(real_scores) / len(real_scores)
    mean_fake_scores = np.sum(fake_scores) / len(fake_scores)
    end = time.time()

    print(f'Epoch: {epoch+1}, loss_d: {mean_loss_d:.2f}, loss_g: {mean_loss_g:.2f}, real_score: {mean_real_scores:.2f}, fake_score: {mean_fake_scores:.2f}')
    print(f'Time Elapsed: {(end-start)/60:.2f} Minutes \n')

    save_sample(epoch+1, fixed_latent)

save_d_at = '/content/drive/MyDrive/GANs/Image Generation/driscriminator.pth'
save_g_at = '/content/drive/MyDrive/GANs/Image Generation/generator.pth'

torch.save(discriminator.state_dict(), save_d_at)
torch.save(generator.state_dict(), save_g_at)
print('Discriminator and Generator models saved at google drive')







